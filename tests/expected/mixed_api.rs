//! API auto-generated by apigen

use std::fmt::Display;

use std::{collections::HashMap, fmt::Debug};

use serde::{Deserialize, Serialize};

use actix_web::{
    get, http::StatusCode, middleware::NormalizePath, web, App, HttpRequest, HttpResponse,
    HttpServer, ResponseError,
};

use async_trait::async_trait;

// Defaults
// -------------------------------

// Enums
// -------------------------------

// Struct
// -------------------------------

#[derive(Serialize, Deserialize, Clone, PartialEq)]
pub struct GreetUserPath {
    /// The name of the user to greet.
    pub user: String,
}

#[derive(Serialize, Deserialize, Clone, PartialEq)]
pub struct GoodbyeUserPath {
    pub user: String,
}

#[derive(Serialize, Deserialize, Clone, PartialEq)]
pub struct GoodbyeUserPathV2 {
    pub user: i64,
}

// Error with details
// -------------------------------

/// Bails with detailed api error
#[macro_export]
macro_rules! apibail {
    ($err:expr,$msg:expr) => {
        return Err($crate::server::api::Detailed {
            error: $err,
            details: $msg.to_string(),
        })
    };
}

pub trait StatusCoded {
    fn status_code(&self) -> StatusCode;
}

#[derive(Debug)]
pub struct Detailed<E> {
    pub error: E,
    pub details: String,
}

impl<E: Display> Display for Detailed<E> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}. Reason: {}", self.error, self.details)
    }
}

impl<E: Display + Debug> std::error::Error for Detailed<E> {}

impl<E: Display + Debug> ResponseError for Detailed<E>
where
    E: StatusCoded,
{
    fn status_code(&self) -> StatusCode {
        self.error.status_code()
    }
}

/// Converts some result to Result with detailed api error
pub trait ApiErr<T, E> {
    /// Wrap the error value with additional context.
    fn apierr<C>(self, err: C) -> Result<T, Detailed<C>>
    where
        C: Display + Send + Sync + 'static;
}

impl<T, E> ApiErr<T, E> for Result<T, E>
where
    E: Debug + Send + Sync + 'static,
{
    fn apierr<C>(self, err: C) -> Result<T, Detailed<C>>
    where
        C: Display + Send + Sync + 'static,
    {
        // Not using map_err to save 2 useless frames off the captured backtrace
        // in ext_context.
        match self {
            Ok(ok) => Ok(ok),
            Err(original_error) => Err(Detailed {
                error: err,
                details: format!("{:?}", original_error),
            }),
        }
    }
}

// Error
// -------------------------------

// Api service
// -------------------------------

#[async_trait(?Send)]
pub trait ApiService<S>
where
    S: Send + Sync + 'static,
{
    /// Returns a greeting to the user!
    async fn greet_user(
        data: web::Data<S>,
        path: web::Path<GreetUserPath>,
    ) -> web::Json<String>;
    /// Returns a greeting to the user!
    async fn goodbye_user(
        data: web::Data<S>,
        path: web::Path<GoodbyeUserPath>,
    ) -> web::Json<String>;
    /// Returns a greeting to the user!
    async fn goodbye_user_v2(
        data: web::Data<S>,
        path: web::Path<GoodbyeUserPathV2>,
    ) -> web::Json<String>;
}

// Run service function (+ helper functions)
// -----------------------------------------
static DOCS_OPENAPI: &str = include_str!("static/openapi_v1.yaml");
static DOCS_HTML: &str = include_str!("static/docs.html");
static DOCS_OPENAPIV2: &str = include_str!("static/openapi_v2.yaml");
async fn openapi() -> String {
    DOCS_OPENAPI.to_string()
}
async fn openapiV2() -> String {
    DOCS_OPENAPIV2.to_string()
}
async fn docs() -> HttpResponse {
    HttpResponse::build(StatusCode::OK)
        .content_type("text/html; charset=utf-8")
        .body(DOCS_HTML)
}

#[get("/")]
async fn redirect_to_docs() -> HttpResponse {
    HttpResponse::build(StatusCode::PERMANENT_REDIRECT)
        .append_header(("Location", "docs"))
        .body("")
}

pub async fn run_service<T, S>(bind: &str, initial_state: S) -> Result<(), std::io::Error>
where
    T: ApiService<S> + 'static,
    S: Send + Sync + 'static,
{
    let app_data = web::Data::new(initial_state);

    HttpServer::new(move || {
        App::new()
            .app_data(app_data.clone())
            .wrap(NormalizePath::trim())
            .service(redirect_to_docs)
            .route(
                "/openapi.yaml",
                web::get().to(openapi)
            )
            .route(
                "/docs",
                web::get().to(docs)
            )
            .route(
                "/v1/openapi.yaml",
                web::get().to(openapi)
            )
            .route(
                "/v1/docs",
                web::get().to(docs)
            )
            .route(
                "/v2/openapi.yaml",
                web::get().to(openapiV2)
            )
            .route(
                "/v2/docs",
                web::get().to(docs)
            )
            .route(
                "/hello/{user}",
                web::get().to(T::greet_user)
            )
            .route(
                "/v1/hello/{user}",
                web::get().to(T::greet_user)
            )
            .route(
                "/goodbye/{user}",
                web::get().to(T::goodbye_user)
            )
            .route(
                "/v1/goodbye/{user}",
                web::get().to(T::goodbye_user)
            )
            .route(
                "/v2/hello/{user}",
                web::get().to(T::greet_user)
            )
            .route(
                "/v2/goodbye/{user}",
                web::get().to(T::goodbye_user_v2)
            )
    })
    .bind(bind)?
    .run()
    .await?;

    Ok(())
}