//! API auto-generated by apigen

use std::fmt::Display;

use std::{collections::HashMap, fmt::Debug};

use serde::{Deserialize, Serialize};

use actix_web::{
    get, http::StatusCode, middleware::NormalizePath, web, App, HttpRequest, HttpResponse,
    HttpServer, ResponseError,
};

use async_trait::async_trait;

// Models
// -------------------------------

{% for model in models %}
{{ model }}
{% endfor %}

// Error with details
// -------------------------------

/// Bails with detailed api error
#[macro_export]
macro_rules! apibail {
    ($err:expr,$msg:expr) => {
        return Err($crate::server::api::Detailed {
            error: $err,
            details: $msg.to_string(),
        })
    };
}

pub trait StatusCoded {
    fn status_code(&self) -> StatusCode;
}

#[derive(Debug)]
pub struct Detailed<E> {
    pub error: E,
    pub details: String,
}

impl<E: Display> Display for Detailed<E> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}. Reason: {}", self.error, self.details)
    }
}

impl<E: Display + Debug> std::error::Error for Detailed<E> {}

impl<E: Display + Debug> ResponseError for Detailed<E>
where
    E: StatusCoded,
{
    fn status_code(&self) -> StatusCode {
        self.error.status_code()
    }
}

/// Converts some result to Result with detailed api error
pub trait ApiErr<T, E> {
    /// Wrap the error value with additional context.
    fn apierr<C>(self, err: C) -> Result<T, Detailed<C>>
    where
        C: Display + Send + Sync + 'static;
}

impl<T, E> ApiErr<T, E> for Result<T, E>
where
    E: Debug + Send + Sync + 'static,
{
    fn apierr<C>(self, err: C) -> Result<T, Detailed<C>>
    where
        C: Display + Send + Sync + 'static,
    {
        // Not using map_err to save 2 useless frames off the captured backtrace
        // in ext_context.
        match self {
            Ok(ok) => Ok(ok),
            Err(original_error) => Err(Detailed {
                error: err,
                details: format!("{:?}", original_error),
            }),
        }
    }
}

// Errors
// -------------------------------

{% for error in errors %}
{{ error }}
{% endfor %}

// Default providers (used for default fields)
// -------------------------------

{% for provider in providers %}

fn {{provider.name}}() -> {{provider.type}} {
    {{provider.value}}
}

{% endfor %}

// Structs for parsing paths
// -------------------------------

{% for method in methods %}
{% if method.path_parameters %}
#[derive(Deserialize)]
pub struct {{method.operation_id | to_camel_case}}Path {
    {% for parameter in method.path_parameters %}
    {% if parameter.rename %}
    #[serde(rename = "{{parameter.rename}}")]
    {% endif %}
    pub {{parameter.name}}: {{parameter.type}},
    {% endfor %}
}

{% endif %}
{% if method.query_parameters %}
#[derive(Deserialize)]
pub struct {{method.operation_id | to_camel_case}}Query {
    {% for parameter in method.query_parameters %}
    {% if parameter.rename or parameter.default %}
    #[serde(
        {% if parameter.rename %}
        rename = "{{parameter.rename}}",
        {% endif %}
        {% if parameter.default %}
        default = "{{parameter.default}}",
        {% endif %}
    )]
    {% endif %}
    pub {{parameter.name}}: {{parameter.type}},
    {% endfor %}
}

{% endif %}
{% endfor %}
// Api service
// -------------------------------

#[async_trait(?Send)]
pub trait ApiService<S>
where
    S: Send + Sync + 'static,
{
    {% for method in methods %}
    {% if not loop.first %}

    {% endif %}
    {% if method.doc %}
    {% for line in method.doc | splitlines %}
    /// {{line}}
    {% endfor %}
    {% endif %}
    {% if method.error_type %}
    async fn {{method.operation_id}}(
        data: web::Data<S>,
        {% if method.path_parameters %}
        path: web::Path<{{method.operation_id | to_camel_case}}Path>,
        {% endif %}
        {% if method.query_parameters %}
        query: web::Query<{{method.operation_id | to_camel_case}}Query>,
        {% endif %}
        {% for parameter in method.parameters %}
        {{parameter.name}}: {{parameter.type}},
        {% endfor %}
    ) -> Result<{{method.response_type}}, Detailed<{{method.error_type}}>>;
    {% else %}
    async fn {{method.operation_id}}(
        data: web::Data<S>,
        {% if method.path_parameters %}
        path: web::Path<{{method.operation_id | to_camel_case}}Path>,
        {% endif %}
        {% if method.query_parameters %}
        query: web::Query<{{method.operation_id | to_camel_case}}Query>,
        {% endif %}
        {% for parameter in method.parameters %}
        {{parameter.name}}: {{parameter.type}},
        {% endfor %}
    ) -> {{method.response_type}};
    {% endif %}
    {% endfor %}
}

static OPENAPI_FILE: &'static str = include_str!("static/openapi.yaml");
static DOCS_PAGE: &'static str = include_str!("static/docs.html");

/// Documentation
#[get("/openapi.yaml")]
async fn openapi() -> String {
    OPENAPI_FILE.to_string()
}

/// Documentation
#[get("/docs")]
async fn docs() -> HttpResponse {
    HttpResponse::build(StatusCode::OK)
        .content_type("text/html; charset=utf-8")
        .body(DOCS_PAGE)
}

#[get("/")]
async fn redirect_to_docs() -> HttpResponse {
    HttpResponse::build(StatusCode::PERMANENT_REDIRECT)
        .append_header(("Location", "/docs"))
        .body("")
}


pub async fn run_service<T, S>(bind: &str, initial_state: S) -> Result<(), std::io::Error>
where
    T: ApiService<S> + 'static,
    S: Send + Sync + 'static,
{
    let app_data = web::Data::new(initial_state);

    HttpServer::new(move || {
        App::new()
            .app_data(app_data.clone())
            .wrap(NormalizePath::trim())
            .service(openapi)
            .service(redirect_to_docs)
            .service(docs)
            {% for method in methods %}
            .route(
                "{{method.path}}",
                web::{{method.method}}().to(T::{{method.operation_id}})
            )
            {% endfor %}
    })
    .bind(bind)?
    .run()
    .await?;

    Ok(())
}
