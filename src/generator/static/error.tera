{%- macro render(model) -%}
{{- model.doc | comment | newline }}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq)]
pub enum {{ model.title }} {
    {%- for variant in model.variants %}
    {{ variant.title }},
    {%- endfor %}
}

impl Display for {{ model.title }} {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let message = match self {
            {%- for variant in model.variants %}
            Self::{{variant.title}} => {{variant.display | quote}},
            {%- endfor %}
        };
        f.write_str(message)
    }
}

impl StatusCoded for {{ model.title }} {
    fn status_code(&self) -> StatusCode {
        match self {
            {%- for variant in model.variants %}
            Self::{{variant.title}} => StatusCode::{{variant.status}},
            {%- endfor %}
        }
    }
}
{%- endmacro render -%}
